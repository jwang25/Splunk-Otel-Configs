# This collector config file is designed for use within an ECS task.
# The collector should run in a sidecar container within an ECS task.
config_sources:
  env:
    defaults:
      METRICS_TO_EXCLUDE: []
      ECS_METADATA_EXCLUDED_IMAGES: []

extensions:
  health_check:
    endpoint: 0.0.0.0:13133
  http_forwarder:
    ingress:
      endpoint: 0.0.0.0:6060
    egress:
      endpoint: "https://api.${SPLUNK_REALM}.signalfx.com"
  zpages:
    endpoint: 0.0.0.0:55679
  memory_ballast:
    # In general, the ballast should be set to 1/3 of the collector's memory, the limit
    # should be 90% of the collector's memory.
    # The simplest way to specify the ballast size is set the value of SPLUNK_BALLAST_SIZE_MIB env variable.
    size_mib: ${SPLUNK_BALLAST_SIZE_MIB}

receivers:
  jaeger:
    protocols:
      grpc:
        endpoint: 0.0.0.0:14250
      thrift_http:
        endpoint: 0.0.0.0:14268
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
  # This section is used to collect the OpenTelemetry Collector metrics
  # Even if just a Splunk APM customer, these metrics are included
  prometheus/internal:
    config:
      scrape_configs:
        - job_name: 'otel-collector'
          scrape_interval: 10s
          static_configs:
            - targets: ['0.0.0.0:8888']
          metric_relabel_configs:
            - source_labels: [__name__]
              regex: '.*grpc_io.*'
              action: drop
  signalfx:
    endpoint: 0.0.0.0:9943
    # Whether to preserve incoming access token and use instead of exporter token
    # default = false
    #access_token_passthrough: true
  zipkin:
    endpoint: 0.0.0.0:9411
  smartagent/signalfx-forwarder:
    type: signalfx-forwarder
    listenAddress: 0.0.0.0:9080
  smartagent/ecs-metadata:
    type: ecs-metadata
    excludedImages: ${env:ECS_METADATA_EXCLUDED_IMAGES}
  smartagent/postgresql_host_one:
    type: postgresql
    topQueryLimit: 100
    connectionString: 'host={{.host}} port={{.port}} user={{.user}} password={{.password}} sslmode=disable'
    params:
      host: ${env:POSTGRES_HOST}
      port: 5432
      user: ${env:username}
      password: ${env:password}
    extraMetrics: ["*"]
    extraGroups: [queries,replication]
  smartagent/sql/system:
    - type: sql
      dbDriver: postgres
      connectionString: 'host={{.host}} port={{.port}} dbname=postgres user={{.user}} password={{.password}} sslmode=disable'
      params:
        host: ${env:POSTGRES_HOST}
        port: 5432
        user: ${env:username}
        password: ${env:password}
      queries:
        - query: 'select sum(size) as size from pg_ls_waldir();'
          metrics:
            - metricName: "pg_ls_waldir_size"
              valueColumn: "size"
        - query: "select count(*) * pg_size_bytes(current_setting('wal_segment_size')) as total_size from pg_ls_dir('pg_xlog') as t(fname) where fname <> 'archive_status';"
          metrics:
            - metricName: "pg_wal_total_size"
              valueColumn: "total_size"
  smartagent/sql/other:
    - type: sql
      dbDriver: postgres
      connectionString: 'host={{.host}} port={{.port}} dbname=test user={{.user}} password={{.password}} sslmode=disable'
      params:
        host: ${env:POSTGRES_HOST}
        port: 5432
        user: ${env:username}
        password: ${env:password}
      queries:
        - query: "SELECT relname as table_name, n_dead_tup FROM pg_stat_user_tables;"
          metrics:
            - metricName: "num_dead_rows"
              valueColumn: "n_dead_tup"
              dimensionColumns: ["table_name"]
        - query: "SELECT temp_bytes, datname as database FROM pg_stat_database WHERE datname IS NOT NULL;"
          metrics:
            - metricName: "temp_bytes"
              valueColumn: "temp_bytes"
              dimensionColumns: ["database"]
  smartagent/postgresql_host_two:
      type: postgresql
      topQueryLimit: 100
      connectionString: 'host={{.host}} port={{.port}} user={{.user}} password={{.password}} sslmode=disable'
      params:
        host: ${env:POSTGRES_HOST_2}
        port: 5432
        user: ${env:username}
        password: ${env:password}
      extraMetrics: ["*"]
      extraGroups: [queries,replication]
  smartagent/sql/system_2:
    - type: sql
      dbDriver: postgres
      connectionString: 'host={{.host}} port={{.port}} dbname=postgres user={{.user}} password={{.password}} sslmode=disable'
      params:
        host: ${env:POSTGRES_HOST_2}
        port: 5432
        user: ${env:username}
        password: ${env:password}
      queries:
        - query: 'select sum(size) as size from pg_ls_waldir();'
          metrics:
            - metricName: "pg_ls_waldir_size"
              valueColumn: "size"
        - query: "select count(*) * pg_size_bytes(current_setting('wal_segment_size')) as total_size from pg_ls_dir('pg_xlog') as t(fname) where fname <> 'archive_status';"
          metrics:
            - metricName: "pg_wal_total_size"
              valueColumn: "total_size"
  smartagent/sql/other_2:
    - type: sql
      dbDriver: postgres
      connectionString: 'host={{.host}} port={{.port}} dbname=test user={{.user}} password={{.password}} sslmode=disable'
      params:
        host: ${env:POSTGRES_HOST_2}
        port: 5432
        user: ${env:username}
        password: ${env:password}
      queries:
        - query: "SELECT relname as table_name, n_dead_tup FROM pg_stat_user_tables;"
          metrics:
            - metricName: "num_dead_rows"
              valueColumn: "n_dead_tup"
              dimensionColumns: ["table_name"]
        - query: "SELECT temp_bytes, datname as database FROM pg_stat_database WHERE datname IS NOT NULL;"
          metrics:
            - metricName: "temp_bytes"
              valueColumn: "temp_bytes"
              dimensionColumns: ["database"]
processors:
  batch:
  # Enabling the memory_limiter is strongly recommended for every pipeline.
  # Configuration is based on the amount of memory allocated to the collector.
  # For more information about memory limiter, see
  # https://github.com/open-telemetry/opentelemetry-collector/blob/main/processor/memorylimiter/README.md
  memory_limiter:
    check_interval: 2s
    limit_mib: ${SPLUNK_MEMORY_LIMIT_MIB}
  # detect if the collector is running on a cloud system
  # important for creating unique cloud provider dimensions
  resourcedetection:
    detectors: [ecs]
    override: false
  # Enables the filter processor with example settings
  # Full configuration here: https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/filterprocessor
  # NOTE: These settings need to be change when using this processor
  filter/1:
    metrics:
      exclude:
        match_type: regexp
        metric_names: ${env:METRICS_TO_EXCLUDE}
  # Optional: The following processor can be used to add a default "deployment.environment" attribute to the logs and
  # traces when it's not populated by instrumentation libraries.
  # If enabled, make sure to enable this processor in the pipeline below.
  resource/add_environment:
    attributes:
      - action: insert
        value: ${env:POSTGRES_HOST}
        key: host.name
  resource/add_environment_2:
    attributes:
      - action: insert
        value: ${env:POSTGRES_HOST_2}
        key: host.name
  attributes/dbname_postgres:
    include:
      match_type: strict
      metric_names: ["pg_ls_waldir_size", "pg_wal_total_size"]
    actions:
      - key: database
        value: "postgres"
        action: insert
  attributes/dbname_test:
    include:
      match_type: strict
      metric_names: ["num_dead_rows"]
    actions:
      - key: database
        value: "test"
        action: insert
        
exporters:
  # Traces
  sapm:
    access_token: "${SPLUNK_ACCESS_TOKEN}"
    endpoint: "https://ingest.${SPLUNK_REALM}.signalfx.com/v2/trace"
  # Metrics + Events
  signalfx:
    access_token: "${SPLUNK_ACCESS_TOKEN}"
    realm: "${SPLUNK_REALM}"
    correlation:
  # Logs + Profiling
  splunk_hec:
    token: "${SPLUNK_HEC_TOKEN}"
    endpoint: "${SPLUNK_HEC_URL}"
    source: "otel"
    sourcetype: "otel"

service:
  extensions: [health_check, http_forwarder, zpages, memory_ballast]
  pipelines:
    traces:
      receivers: [jaeger, otlp, zipkin, smartagent/signalfx-forwarder]
      processors:
        - memory_limiter
        - batch
        - resourcedetection
#        - resource/add_environment
      exporters: [sapm, signalfx]
    # metrics pipeline for host one
    metrics:
      receivers: [signalfx, smartagent/signalfx-forwarder, smartagent/ecs-metadata, prometheus/internal, smartagent/postgresql_host_one, smartagent/sql/system, smartagent/sql/other]
      processors: [memory_limiter, batch, resourcedetection, resource/add_environment, attributes/dbname_postgres, attributes/dbname_test]
      exporters: [signalfx]
    # metrics pipeline for host two
    metrics/host_2:
      receivers: [signalfx, smartagent/signalfx-forwarder, smartagent/ecs-metadata, prometheus/internal, smartagent/postgresql_host_two, smartagent/sql/system_2, smartagent/sql/other_2]
      processors: [memory_limiter, batch, resourcedetection, resource/add_environment_2, attributes/dbname_postgres, attributes/dbname_test]
      exporters: [signalfx]
    logs:
      receivers: [otlp]
      processors:
        - memory_limiter
        - batch
        - resourcedetection
        #- resource/add_environment
      exporters: [splunk_hec]
      # Use instead when sending to gateway
      #exporters: [otlp]
